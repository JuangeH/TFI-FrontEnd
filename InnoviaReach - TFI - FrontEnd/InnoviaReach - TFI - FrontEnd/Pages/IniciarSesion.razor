@layout LoginLayout
@inject IStringLocalizer<Resource> Localizer
@inject NavigationManager nav
@inject LocalizationService local
@* @inject IHttpContextAccessor HttpContextAccessor *@
@using System.Globalization
@inject ISessionStorageService sessionStorage
@inject ISnackbar Snackbar


@page "/login"

<PageTitle>Inicio de sesión</PageTitle>

@using System.ComponentModel.DataAnnotations
@using InnoviaReach___TFI___FrontEnd.Components
@using InnoviaReach___TFI___FrontEnd.Data
@inject HttpClient httpClient
@inject IServiceProvider serviceProvider
@inject NavigationManager NavManager
@inject IDialogService DialogService
@using System.Net.Http.Json
@using InnoviaReach___TFI___FrontEnd.Services
@using Microsoft.AspNetCore.Localization
@using Microsoft.Extensions.Options
@using Newtonsoft.Json
@using System.Net.Http.Headers

<div class="login-container">
    <div class="form-wrapper">
        <main class="form-side">
            <form class="my-form login" @onsubmit=Submit>
                <div class="form-welcome-row">
                    <CultureSelector></CultureSelector>
                    <h1>@(Localizer["WelcomeMessage"] ?? "Fallback Value")</h1>
                    <h1>@(Localizer["SubWelcomeMessage"] ?? "Fallback Value")</h1>
                </div>
                <div class="text-field">
                    <label for="email">@Localizer["EmailLabel"]</label>
                    <input @bind-value=_loginRequest.username type="email" id="email" name="email" autocomplete="off" placeholder="@Localizer["EmailPlaceholder"]"
                           required>
                    <div class="error-message">@Localizer["EmailError"]</div>
                </div>
                <div class="text-field">
                    <label for="password">@Localizer["PasswordLabel"]</label>
                    <input @bind-value=_loginRequest.password id="password" type="password" name="password" placeholder="@Localizer["PasswordPlaceholder"]" title="@Localizer["PasswordError"]">
                    <div class="error-message">@Localizer["PasswordError"]</div>
                </div>
                <button class="my-form__button" type="submit" disabled="@isSubmitting">
                    @Localizer["SignInButton"]
                </button>
                <div class="my-form__actions">
                    <div class="my-form__row">
                        <span>@Localizer["NoAccountMessage"]</span>
                        <a @onclick=Register title="@Localizer["SignUpLink"]">
                            @Localizer["SignUpLink"]
                        </a>
                    </div>
                </div>
            </form>
        </main>
        <aside class="info-side">
        </aside>
    </div>
</div>


@code {
    public LoginTokenResponse user;
    bool isSubmitting = false;
    bool success;
    LoginRequest _loginRequest = new LoginRequest();
    [Inject]
    private ISessionStorageService _sessionStorageService { get; set; }

    [Inject]
    private IStringLocalizer<MyLocalization> LocalizerVTEST { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //await Login();
    }

    protected async Task Submit()
    {
        if (isSubmitting) return; // Prevenir múltiples envíos
        isSubmitting = true; // Deshabilitar el botón de envío

        try
        {
            string url = @$"https://localhost:44308/Auth/Login";
            var response = await httpClient.PostAsJsonAsync(url, _loginRequest);

            if (response.IsSuccessStatusCode)
            {
                string content = await response.Content.ReadAsStringAsync();
                LoginTokenResponse login = JsonConvert.DeserializeObject<LoginTokenResponse>(content) ?? throw new Exception("Ocurrió un error");
                await _sessionStorageService.SetItemAsync("user", login);

                var currentUri = nav.Uri;

                // Extraer solo la parte de la ruta y consulta de la URL actual
                var uri = new Uri(currentUri).GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);

                // Escapar correctamente los valores para incluirlos en la URL
                var cultureEscaped = Uri.EscapeDataString(CultureInfo.CurrentCulture.Name);
                var uriEscaped = Uri.EscapeDataString(currentUri); // Usamos la URL completa del frontend

                user = await sessionStorage.GetItemAsync<LoginTokenResponse>("user");
                httpClient.DefaultRequestHeaders.Clear();
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user?.Token ?? string.Empty);

                var result = await httpClient.PostAsJsonAsync<CultureRequest>($"Users/Culture/Set", new CultureRequest() { culture = cultureEscaped, redirectUri = uriEscaped });

                NavManager.NavigateTo("/");
            }
            else
            {
                throw new Exception();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error al iniciar sesión", Severity.Error, options =>
            {
                options.VisibleStateDuration = 1000;
            });
        }
        finally
        {
            isSubmitting = false; // Habilitar el botón de envío de nuevo
        }
    }
    protected async Task Login()
    {
    //    if (isSubmitting) return; // Prevenir múltiples envíos
    //    isSubmitting = true; // Deshabilitar el botón de envío

        try
        {
            //string url = "https:localhost:44308/Auth/Login?username=" + _loginRequest.username + "&password=" + _loginRequest.password;
            string url = @$"https://localhost:44308/Auth/Login";
            var response = await httpClient.PostAsJsonAsync(url, new LoginRequest(){username = "juanhenrich1@gmail.com", password="1234567"});

            if (response.IsSuccessStatusCode)
            {
                string content = await response.Content.ReadAsStringAsync();
                LoginTokenResponse login = JsonConvert.DeserializeObject<LoginTokenResponse>(content) ?? throw new Exception("Ocurrió un error");
                await _sessionStorageService.SetItemAsync("user", login);

                var currentUri = nav.Uri;

                // Extraer solo la parte de la ruta y consulta de la URL actual
                var uri = new Uri(currentUri).GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);

                // Escapar correctamente los valores para incluirlos en la URL
                var cultureEscaped = Uri.EscapeDataString(CultureInfo.CurrentCulture.Name);
                var uriEscaped = Uri.EscapeDataString(currentUri); // Usamos la URL completa del frontend

                user = await sessionStorage.GetItemAsync<LoginTokenResponse>("user");
                httpClient.DefaultRequestHeaders.Clear();
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user?.Token ?? string.Empty);

                var result = await httpClient.PostAsJsonAsync<CultureRequest>($"Users/Culture/Set", new CultureRequest() { culture = cultureEscaped, redirectUri = uriEscaped });

                NavManager.NavigateTo("/");
            }
            else
            {
                throw new Exception();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error al iniciar sesión", Severity.Error, options =>
            {
                options.VisibleStateDuration = 1000;
            });
        }
        finally
        {
            isSubmitting = false; // Habilitar el botón de envío de nuevo
        }
    }
    protected async Task Register()
    {
        try
        {
            NavManager.NavigateTo("/Registro");
        }
        catch (Exception ex)
        {

        }

    }
    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }

}
