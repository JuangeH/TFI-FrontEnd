@page "/Catalogo"

@using System.Net.Http.Json
@using InnoviaReach___TFI___FrontEnd.Data
@using System.Net.Http.Headers
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject ISessionStorageService sessionStorage
@inject NavigationManager NavManager
@inject IStringLocalizer<Resource> Localizer

<section class="cat-sc-category" style="height: 100vh">
    <div class="cat-container">
        <div class="cat-sc-title">
            <h3 class="cat-h3">@Localizer["GameStore"]</h3>
            <div class="cat-line"></div>
        </div>
        <div class="wrap-searchbar">
            <div class="search-searchbar">
                <input type="text" class="searchTerm-searchbar" placeholder="@Localizer["SearchPlaceholder"]"
                       @bind="searchText" @oninput="OnInputChanged" @onfocus="ShowSuggestions" />
                <button type="button" class="searchButton-searchbar" @onclick="SearchAndOpenPopup">
                    <i class="fa fa-search"></i>
                </button>
                <ul class="suggestions-list @(showSuggestions && filteredSuggestions.Any() ? "active" : "")">
                    @foreach (var suggestion in filteredSuggestions)
                    {
                        <li class="suggestion-item" @onclick="() => SelectSuggestion(suggestion)">
                            @suggestion
                        </li>
                    }
                </ul>
            </div>
        </div>

        @if (!isCatalogLoading)
        {
            <VideojuegoDetailDialog Show="@showPopup" videojuego="@VideojuegoSeleccionado" OnClose="ClosePopup"></VideojuegoDetailDialog>
            <div class="cat-mt-16 cat-grid cat-gap-6 cat-sm:grid-cols-2 cat-md:grid-cols-3">
                @foreach (var item in videojuegos)
                {
                    <div class="cat-store-item" @onclick="@(() => OpenPopup(item.Nombre))">
                        <div class="cat-img-fit-cover">
                            <img class="cat-img" src="assets/Recomendaciones/images/store-1.png" alt="">
                        </div>
                        <div class="cat-store-item-info cat-group">
                            <h3 class="cat-h3 cat-uppercase cat-text-violet-darker cat-font-bold cat-tracking-[.04em] cat-mb-2 cat-group-hover:text-white cat-transition cat-ease-in-out cat-duration-300">@item.Nombre</h3>
                            <ul>
                                <li class="cat-text-dark cat-group-hover:text-white cat-transition cat-ease-in-out cat-duration-300">
                                    <span class="cat-me-1 cat-font-bold">@Localizer["RatingLabel"]:</span>
                                    <span>@item.Rating</span>
                                </li>
                            </ul>
                        </div>
                    </div>
                }
            </div>
            <div class="d-flex flex-column align-center catalogo-pagination">
                <MudPagination @bind-SelectedPage="currentPage"
                           Count="totalPages"
                           ShowFirstButton="true"
                           ShowLastButton="true"
                           SelectedChanged="PageChanged"
                           Class="mt-4" />
            </div>
        }
        else
        {
            <SpinnerLoading show=@isCatalogLoading />
        }
    </div>
</section>

@code {
    private string searchText = "";
    private List<string> filteredSuggestions = new();
    private bool showSuggestions = false;

    public IEnumerable<VideojuegoCatalogoResponse> videojuegos = new List<VideojuegoCatalogoResponse>();
    private bool isCatalogLoading;
    private int currentPage = 1;
    private int totalPages;
    private int pageSize = 12;
    private int totalRecords;
    private VideojuegoCatalogoDetalleResponse VideojuegoSeleccionado = new VideojuegoCatalogoDetalleResponse();

    private bool showPopup = false;

    private async Task OpenPopup(string nombre)
    {
        try
        {
            showPopup = true;
            var user = await sessionStorage.GetItemAsync<LoginTokenResponse>("user");
            httpClient.DefaultRequestHeaders.Clear();
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.Token);
            var response = await httpClient.GetFromJsonAsync<VideojuegoCatalogoDetalleResponse>($"Videojuego/ObtenerVideojuegoDetalleCatalogo?nombre={nombre}");
            VideojuegoSeleccionado = response;
        }
        catch (Exception)
        {
            Snackbar.Add("Error al abrir el detalle del videojuego", Severity.Error, options =>
            {
                options.VisibleStateDuration = 1000;
            });
        }
    }

    private void ClosePopup()
    {
        showPopup = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var user = await sessionStorage.GetItemAsync<LoginTokenResponse>("user");
                httpClient.DefaultRequestHeaders.Clear();
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.Token);
                await LoadData();
            }
            catch
            {

            }
            finally
            {
                isCatalogLoading = false;
                StateHasChanged();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        isCatalogLoading = true;
        StateHasChanged();
    }

    private async Task LoadData()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<PaginationResponse<VideojuegoCatalogoResponse>>($"Videojuego/ObtenerVideojuegosCatalogo?pageNumber={currentPage}&pageSize={pageSize}");
            videojuegos = response.Videojuegos;
            totalRecords = response.TotalRecords;
            totalPages = (int)Math.Ceiling((double)totalRecords / pageSize);
        }
        catch (Exception)
        {
            Snackbar.Add("Error al obtener videojuegos", Severity.Error, options =>
            {
                options.VisibleStateDuration = 1000;
            });
        }
    }

    private async Task PageChanged(int page)
    {
        try
        {
            currentPage = page;
            await LoadData();
        }
        catch (Exception)
        {
            Snackbar.Add("Error al cambiar página", Severity.Warning, options =>
            {
                options.VisibleStateDuration = 1000;
            });
        }
    }

    private async Task OnInputChanged(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? string.Empty;

        if (string.IsNullOrWhiteSpace(searchText))
        {
            filteredSuggestions.Clear();
            showSuggestions = false;
            return;
        }

        try
        {
            var user = await sessionStorage.GetItemAsync<LoginTokenResponse>("user");
            httpClient.DefaultRequestHeaders.Clear();
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.Token);

            var result = await httpClient.GetFromJsonAsync<List<VideojuegoForoReponse>>($"Videojuego/BuscarVideojuegoForo?nombre={searchText}&pageSize=10");

            filteredSuggestions = result?.Select(v => v.Nombre).ToList() ?? new List<string>();
            showSuggestions = filteredSuggestions.Any();
        }
        catch
        {

        }
    }
    private void SelectSuggestion(string suggestion)
    {
        searchText = suggestion;
        showSuggestions = false;
    }
    private void ShowSuggestions()
    {
        showSuggestions = true;
    }
    private async Task SearchAndOpenPopup()
    {
        try
        {
            var user = await sessionStorage.GetItemAsync<LoginTokenResponse>("user");
            httpClient.DefaultRequestHeaders.Clear();
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.Token);

            var videojuegoSeleccionado = await httpClient.GetFromJsonAsync<VideojuegoForoReponse>(
                $"Videojuego/ObtenerVideojuegoForo?nombre={searchText}");

            if (videojuegoSeleccionado != null)
            {
                await OpenPopup(videojuegoSeleccionado.Nombre);
            }
            else
            {
                Snackbar.Add(Localizer["GameNotFound"], Severity.Warning);
            }
        }
        catch
        {
            Snackbar.Add(Localizer["SearchError"], Severity.Error);
        }
        finally
        {
            isCatalogLoading = false;
            StateHasChanged();
        }
    }
}
