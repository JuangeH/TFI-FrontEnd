@using System.Net.Http.Headers
@inject ISessionStorageService sessionStorage
@inject HttpClient httpClient
@inject IStringLocalizer<Resource> Localizer
@inject ISnackbar Snackbar

@if (isSubmitting)
{
    <SpinnerLoading show=@isSubmitting />
}
else
{
    @if (ShowPopup)
    {
        <div class="createforum-popup-overlay"></div> <!-- Overlay to block the background -->
    }

    <div class="createforum-popup @(ShowPopup ? "active" : "")">
        <div class="createforum-close-btn" @onclick="ClosePopup">&times;</div>
        <div class="createforum-form">
            <h2>@Localizer["PasswordModification"]</h2>
            <div class="createforum-form-element">
                <div class="text-field">
                    <label for="password">@Localizer["Password"]</label>
                    <input @bind=passwordRequest.OldPassword id="password" type="password" name="password" placeholder="@Localizer["PasswordPlaceholder"]" title="@Localizer["PasswordTooltip"]">
                    <div class="error-message">
                        @Localizer["PasswordRequirements"]
                    </div>
                </div>
            </div>
            <div class="createforum-form-element">
                <div class="text-field">
                    <label for="password">@Localizer["ConfirmPassword"]</label>
                    <input @bind=passwordRequest.NewPassword id="password" type="password" name="password" placeholder="@Localizer["PasswordPlaceholder"]" title="@Localizer["PasswordTooltip"]">
                    <div class="error-message">
                        @Localizer["PasswordRequirements"]
                    </div>
                </div>
            </div>
            <div class="createforum-form-element">
                <button @onclick="Submit">@Localizer["SubmitButton"]</button>
            </div>
        </div>
    </div>
}
@code {
    private string Descripcion = "";
    private string Titulo = "";
    private string searchText = "";
    private List<string> filteredSuggestions = new();
    private bool showSuggestions = false;
    private List<string> options = new(); // Todas las opciones (Videojuegos)
    private bool isSubmitting = false;

    public ForoRequest foroRequest = new ForoRequest();
    public ChangePasswordRequest passwordRequest = new ChangePasswordRequest();

    [Parameter] public bool ShowPopup { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private async void ClosePopup()
    {
        try
        {
            ShowPopup = false;
            await OnClose.InvokeAsync();
        }
        catch (Exception)
        {
        }
    }

    private async Task Submit()
    {
        try
        {
            isSubmitting = true; // Inicia la carga
            StateHasChanged();

            // Obtener el usuario logueado
            var user = await sessionStorage.GetItemAsync<LoginTokenResponse>("user");
            httpClient.DefaultRequestHeaders.Clear();
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.Token);

            // Asignar valores al passwordRequest y enviarlo al backend
            var result = await httpClient.PostAsJsonAsync<ChangePasswordRequest>("Auth/ChangePassword", passwordRequest);

            if (result.IsSuccessStatusCode)
            {
                Snackbar.Add("Contraseña modificada", Severity.Success, options =>
                {
                    options.VisibleStateDuration = 1000;
                });
            }
            // Cerrar el popup si la operación es exitosa
            ClosePopup();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error al cambiar contraseña", Severity.Error, options =>
            {
                options.VisibleStateDuration = 1000;
            });
        }
        finally
        {
            isSubmitting = false; // Termina la carga
            StateHasChanged();
        }
    }
}
